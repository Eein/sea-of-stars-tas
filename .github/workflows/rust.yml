name: Rust - Test

on:
  workflow_dispatch:
  pull_request:
    branches: [ "main", "dev" ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"

jobs:

  build:
    # Set the job to run on the platform specified by the matrix below
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: write
      # Define the build matrix for cross-compilation
    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: win-amd64
            runner: windows-latest
            target: x86_64-pc-windows-msvc
            # - name: macos-amd64
            #   runner: macos-latest
            #   target: x86_64-apple-darwin
            # - name: macos-arm64
            #   runner: macos-latest
            #   target: aarch64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: "${{ matrix.target }}"

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "release"

      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose

  clippy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # selecting a toolchain either by action or manual `rustup` calls should happen
    # before the plugin, as the cache uses the current rustc version as its cache key
    - run: rustup toolchain install nightly 

    - uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "clippy"

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  format:
    name: format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v4

      - name: Check formatting of Rust code with rustfmt
        uses: actions-rust-lang/rustfmt@v1.1.0
            
